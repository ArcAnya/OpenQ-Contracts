/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockNft,
  MockNftInterface,
} from "../../../contracts/Tokens/MockNft";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x610100604052605460808181529062001b3e60a039600990620000239082620001ad565b503480156200003157600080fd5b5060405180604001604052806007815260200166135bd8dad3999d60ca1b815250604051806040016040528060048152602001631353919560e21b8152508160009081620000809190620001ad565b5060016200008f8282620001ad565b505050620000ac620000a6620000b260201b60201c565b620000b6565b62000279565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200013357607f821691505b6020821081036200015457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001a857600081815260208120601f850160051c81016020861015620001835750805b601f850160051c820191505b81811015620001a4578281556001016200018f565b5050505b505050565b81516001600160401b03811115620001c957620001c962000108565b620001e181620001da84546200011e565b846200015a565b602080601f831160018114620002195760008415620002005750858301515b600019600386901b1c1916600185901b178555620001a4565b600085815260208120601f198616915b828110156200024a5788860151825594840194600190910190840162000229565b5085821015620002695787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6118b580620002896000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a22cb46511610071578063a22cb4651461021b578063b88d4fde1461022e578063c87b56dd14610241578063e985e9c514610254578063f2fde38b1461026757600080fd5b806370a08231146101d9578063715018a6146101fa5780638da5cb5b1461020257806395d89b411461021357600080fd5b806323b872dd116100de57806323b872dd1461018d57806340d097c3146101a057806342842e0e146101b35780636352211e146101c657600080fd5b806301ffc9a71461011057806306fdde0314610138578063081812fc1461014d578063095ea7b314610178575b600080fd5b61012361011e3660046112f7565b61027a565b60405190151581526020015b60405180910390f35b6101406102cc565b60405161012f9190611364565b61016061015b366004611377565b61035e565b6040516001600160a01b03909116815260200161012f565b61018b6101863660046113ac565b610385565b005b61018b61019b3660046113d6565b61049f565b61018b6101ae366004611412565b6104d0565b61018b6101c13660046113d6565b610595565b6101606101d4366004611377565b6105b0565b6101ec6101e7366004611412565b610610565b60405190815260200161012f565b61018b610696565b6007546001600160a01b0316610160565b6101406106aa565b61018b61022936600461142d565b6106b9565b61018b61023c36600461147f565b6106c4565b61014061024f366004611377565b6106fc565b61012361026236600461155b565b610707565b61018b610275366004611412565b610735565b60006001600160e01b031982166380ac58cd60e01b14806102ab57506001600160e01b03198216635b5e139f60e01b145b806102c657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102db9061158e565b80601f01602080910402602001604051908101604052809291908181526020018280546103079061158e565b80156103545780601f1061032957610100808354040283529160200191610354565b820191906000526020600020905b81548152906001019060200180831161033757829003601f168201915b5050505050905090565b6000610369826107ae565b506000908152600460205260409020546001600160a01b031690565b6000610390826105b0565b9050806001600160a01b0316836001600160a01b0316036104025760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061041e575061041e8133610707565b6104905760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016103f9565b61049a838361080d565b505050565b6104a9338261087b565b6104c55760405162461bcd60e51b81526004016103f9906115c8565b61049a8383836108da565b6104d8610a4b565b60006104e360085490565b90506104f3600880546001019055565b6104fd8282610aa5565b610591816009805461050e9061158e565b80601f016020809104026020016040519081016040528092919081815260200182805461053a9061158e565b80156105875780601f1061055c57610100808354040283529160200191610587565b820191906000526020600020905b81548152906001019060200180831161056a57829003601f168201915b5050505050610abf565b5050565b61049a838383604051806020016040528060008152506106c4565b6000818152600260205260408120546001600160a01b0316806102c65760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103f9565b60006001600160a01b03821661067a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016103f9565b506001600160a01b031660009081526003602052604090205490565b61069e610a4b565b6106a86000610b52565b565b6060600180546102db9061158e565b610591338383610ba4565b6106ce338361087b565b6106ea5760405162461bcd60e51b81526004016103f9906115c8565b6106f684848484610c72565b50505050565b60606102c682610ca5565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61073d610a4b565b6001600160a01b0381166107a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f9565b6107ab81610b52565b50565b6000818152600260205260409020546001600160a01b03166107ab5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103f9565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610842826105b0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610887836105b0565b9050806001600160a01b0316846001600160a01b031614806108ae57506108ae8185610707565b806108d25750836001600160a01b03166108c78461035e565b6001600160a01b0316145b949350505050565b826001600160a01b03166108ed826105b0565b6001600160a01b0316146109135760405162461bcd60e51b81526004016103f990611615565b6001600160a01b0382166109755760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103f9565b6109828383836001610dad565b826001600160a01b0316610995826105b0565b6001600160a01b0316146109bb5760405162461bcd60e51b81526004016103f990611615565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6007546001600160a01b031633146106a85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f9565b610591828260405180602001604052806000815250610e35565b6000828152600260205260409020546001600160a01b0316610b3a5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016103f9565b600082815260066020526040902061049a82826116a8565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610c055760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103f9565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610c7d8484846108da565b610c8984848484610e68565b6106f65760405162461bcd60e51b81526004016103f990611768565b6060610cb0826107ae565b60008281526006602052604081208054610cc99061158e565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf59061158e565b8015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b505050505090506000610d6060408051602081019091526000815290565b90508051600003610d72575092915050565b815115610da4578082604051602001610d8c9291906117ba565b60405160208183030381529060405292505050919050565b6108d284610f69565b60018111156106f6576001600160a01b03841615610df3576001600160a01b03841660009081526003602052604081208054839290610ded9084906117ff565b90915550505b6001600160a01b038316156106f6576001600160a01b03831660009081526003602052604081208054839290610e2a908490611812565b909155505050505050565b610e3f8383610fdd565b610e4c6000848484610e68565b61049a5760405162461bcd60e51b81526004016103f990611768565b60006001600160a01b0384163b15610f5e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610eac903390899088908890600401611825565b6020604051808303816000875af1925050508015610ee7575060408051601f3d908101601f19168201909252610ee491810190611862565b60015b610f44573d808015610f15576040519150601f19603f3d011682016040523d82523d6000602084013e610f1a565b606091505b508051600003610f3c5760405162461bcd60e51b81526004016103f990611768565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108d2565b506001949350505050565b6060610f74826107ae565b6000610f8b60408051602081019091526000815290565b90506000815111610fab5760405180602001604052806000815250610fd6565b80610fb584611176565b604051602001610fc69291906117ba565b6040516020818303038152906040525b9392505050565b6001600160a01b0382166110335760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103f9565b6000818152600260205260409020546001600160a01b0316156110985760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103f9565b6110a6600083836001610dad565b6000818152600260205260409020546001600160a01b03161561110b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103f9565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060600061118383611209565b600101905060008167ffffffffffffffff8111156111a3576111a3611469565b6040519080825280601f01601f1916602001820160405280156111cd576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846111d757509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106112485772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611274576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061129257662386f26fc10000830492506010015b6305f5e10083106112aa576305f5e100830492506008015b61271083106112be57612710830492506004015b606483106112d0576064830492506002015b600a83106102c65760010192915050565b6001600160e01b0319811681146107ab57600080fd5b60006020828403121561130957600080fd5b8135610fd6816112e1565b60005b8381101561132f578181015183820152602001611317565b50506000910152565b60008151808452611350816020860160208601611314565b601f01601f19169290920160200192915050565b602081526000610fd66020830184611338565b60006020828403121561138957600080fd5b5035919050565b80356001600160a01b03811681146113a757600080fd5b919050565b600080604083850312156113bf57600080fd5b6113c883611390565b946020939093013593505050565b6000806000606084860312156113eb57600080fd5b6113f484611390565b925061140260208501611390565b9150604084013590509250925092565b60006020828403121561142457600080fd5b610fd682611390565b6000806040838503121561144057600080fd5b61144983611390565b91506020830135801515811461145e57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561149557600080fd5b61149e85611390565b93506114ac60208601611390565b925060408501359150606085013567ffffffffffffffff808211156114d057600080fd5b818701915087601f8301126114e457600080fd5b8135818111156114f6576114f6611469565b604051601f8201601f19908116603f0116810190838211818310171561151e5761151e611469565b816040528281528a602084870101111561153757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561156e57600080fd5b61157783611390565b915061158560208401611390565b90509250929050565b600181811c908216806115a257607f821691505b6020821081036115c257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b601f82111561049a57600081815260208120601f850160051c810160208610156116815750805b601f850160051c820191505b818110156116a05782815560010161168d565b505050505050565b815167ffffffffffffffff8111156116c2576116c2611469565b6116d6816116d0845461158e565b8461165a565b602080601f83116001811461170b57600084156116f35750858301515b600019600386901b1c1916600185901b1785556116a0565b600085815260208120601f198616915b8281101561173a5788860151825594840194600190910190840161171b565b50858210156117585787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600083516117cc818460208801611314565b8351908301906117e0818360208801611314565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102c6576102c66117e9565b808201808211156102c6576102c66117e9565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061185890830184611338565b9695505050505050565b60006020828403121561187457600080fd5b8151610fd6816112e156fea26469706673582212204ca198f08b7f00ec818e3d80a004e340a481c5710a29f1740cb53eb0f887691264736f6c6343000810003368747470733a2f2f6461726b686f7273652e696e667572612d697066732e696f2f697066732f516d647078737237596e6866367046365935726b653466574e455a633367655775704c694732754b433352385254";

type MockNftConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockNftConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockNft__factory extends ContractFactory {
  constructor(...args: MockNftConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockNft> {
    return super.deploy(overrides || {}) as Promise<MockNft>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockNft {
    return super.attach(address) as MockNft;
  }
  override connect(signer: Signer): MockNft__factory {
    return super.connect(signer) as MockNft__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockNftInterface {
    return new utils.Interface(_abi) as MockNftInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockNft {
    return new Contract(address, _abi, signerOrProvider) as MockNft;
  }
}
