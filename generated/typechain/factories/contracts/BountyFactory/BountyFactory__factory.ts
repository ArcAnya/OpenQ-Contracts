/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BountyFactory,
  BountyFactoryInterface,
} from "../../../contracts/BountyFactory/BountyFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_openQ",
        type: "address",
      },
      {
        internalType: "address",
        name: "_beacon",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "getBeacon",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_id",
        type: "string",
      },
      {
        internalType: "address",
        name: "_issuer",
        type: "address",
      },
      {
        internalType: "string",
        name: "_organization",
        type: "string",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "operationType",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct OpenQDefinitions.Operation[]",
        name: "operations",
        type: "tuple[]",
      },
    ],
    name: "mintBounty",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "openQ",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161104438038061104483398101604081905261002f91610078565b603380546001600160a01b0319166001600160a01b0384161790556001600160a01b0316608052506100ab565b80516001600160a01b038116811461007357600080fd5b919050565b6000806040838503121561008b57600080fd5b6100948361005c565b91506100a26020840161005c565b90509250929050565b608051610f786100cc60003960008181604d01526101260152610f786000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80632d6b3a6b146200004b5780637dc81fa21462000089578063fb254de3146200009b575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200160405180910390f35b6033546001600160a01b03166200006d565b6200006d620000ac36600462000357565b6033546000906001600160a01b0316336001600160a01b031614620001175760405162461bcd60e51b815260206004820181905260248201527f4d6574686f64206973206f6e6c792063616c6c61626c65206279204f70656e51604482015260640160405180910390fd5b6200012233620001dd565b60007f00000000000000000000000000000000000000000000000000000000000000008686866200015b6033546001600160a01b031690565b876040516024016200017295949392919062000559565b60408051601f198184030181529181526020820180516001600160e01b03166301f9276360e31b17905251620001a8906200024b565b620001b59291906200061a565b604051809103906000f080158015620001d2573d6000803e3d6000fd5b509695505050505050565b6040516001600160a01b0382166024820152620002279060440160408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b1790526200022a565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6108fa806200064983390190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171562000295576200029562000259565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715620002c757620002c762000259565b604052919050565b600067ffffffffffffffff831115620002ec57620002ec62000259565b62000301601f8401601f19166020016200029b565b90508281528383830111156200031657600080fd5b828260208301376000602084830101529392505050565b600082601f8301126200033f57600080fd5b6200035083833560208501620002cf565b9392505050565b600080600080608085870312156200036e57600080fd5b67ffffffffffffffff80863511156200038657600080fd5b6200039587873588016200032d565b945060208601356001600160a01b0381168114620003b257600080fd5b9350604086013581811115620003c757600080fd5b620003d5888289016200032d565b935050606086013581811115620003eb57600080fd5b8601601f81018813620003fd57600080fd5b80358281111562000412576200041262000259565b6200042360208260051b016200029b565b8082825260208201915060208360051b85010192508a8311156200044657600080fd5b602084015b83811015620004f95785813511156200046357600080fd5b803585016040818e03601f190112156200047c57600080fd5b620004866200026f565b602082013563ffffffff811681146200049e57600080fd5b8152604082013588811115620004b357600080fd5b8083019250508d603f830112620004c957600080fd5b620004dd8e602084013560408501620002cf565b602082015280855250506020830192506020810190506200044b565b50979a9699509497505050505050565b6000815180845260005b81811015620005315760208185018101518683018201520162000513565b8181111562000544576000602083870101525b50601f01601f19169290920160200192915050565b60a0815260006200056e60a083018862000509565b602060018060a01b038089168286015260408584038187015262000593848a62000509565b91881660608701528582036080870152865180835291935082840191600581901b8501840184890160005b838110156200060757878303601f190186528151805163ffffffff168452870151878401869052620005f38685018262000509565b9688019693505090860190600101620005be565b50909d9c50505050505050505050505050565b6001600160a01b0383168152604060208201819052600090620006409083018462000509565b94935050505056fe60806040526040516108fa3803806108fa83398101604081905261002291610456565b61002e82826000610035565b5050610580565b61003e83610100565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a260008251118061007f5750805b156100fb576100f9836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e99190610516565b836102a360201b6100291760201c565b505b505050565b610113816102cf60201b6100551760201c565b6101725760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101e6816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d79190610516565b6102cf60201b6100551760201c565b61024b5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b6064820152608401610169565b806102827fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102de60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102c883836040518060600160405280602781526020016108d3602791396102e1565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b6103495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610169565b600080856001600160a01b0316856040516103649190610531565b600060405180830381855af49150503d806000811461039f576040519150601f19603f3d011682016040523d82523d6000602084013e6103a4565b606091505b5090925090506103b58282866103bf565b9695505050505050565b606083156103ce5750816102c8565b8251156103de5782518084602001fd5b8160405162461bcd60e51b8152600401610169919061054d565b80516001600160a01b038116811461040f57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561044557818101518382015260200161042d565b838111156100f95750506000910152565b6000806040838503121561046957600080fd5b610472836103f8565b60208401519092506001600160401b038082111561048f57600080fd5b818501915085601f8301126104a357600080fd5b8151818111156104b5576104b5610414565b604051601f8201601f19908116603f011681019083821181831017156104dd576104dd610414565b816040528281528860208487010111156104f657600080fd5b61050783602083016020880161042a565b80955050505050509250929050565b60006020828403121561052857600080fd5b6102c8826103f8565b6000825161054381846020870161042a565b9190910192915050565b602081526000825180602084015261056c81604085016020870161042a565b601f01601f19169190910160400192915050565b6103448061058f6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e860279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061023f565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b60606001600160a01b0384163b6101915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101ac9190610298565b600060405180830381855af49150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915091506101fc828286610206565b9695505050505050565b6060831561021557508161004e565b8251156102255782518084602001fd5b8160405162461bcd60e51b815260040161018891906102b4565b60006020828403121561025157600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028357818101518382015260200161026b565b83811115610292576000848401525b50505050565b600082516102aa818460208701610268565b9190910192915050565b60208152600082518060208401526102d3816040850160208701610268565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209d11f6b792b44bdcc12984b746d6869c77be4aa1884503fc5b37d0b6504edca364736f6c634300080d0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ac51d8187693b061b732ca9b8699d9912d98e0b22b23a52c89e4980b9d0b145064736f6c634300080d0033";

type BountyFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BountyFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BountyFactory__factory extends ContractFactory {
  constructor(...args: BountyFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _openQ: PromiseOrValue<string>,
    _beacon: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BountyFactory> {
    return super.deploy(
      _openQ,
      _beacon,
      overrides || {}
    ) as Promise<BountyFactory>;
  }
  override getDeployTransaction(
    _openQ: PromiseOrValue<string>,
    _beacon: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_openQ, _beacon, overrides || {});
  }
  override attach(address: string): BountyFactory {
    return super.attach(address) as BountyFactory;
  }
  override connect(signer: Signer): BountyFactory__factory {
    return super.connect(signer) as BountyFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BountyFactoryInterface {
    return new utils.Interface(_abi) as BountyFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BountyFactory {
    return new Contract(address, _abi, signerOrProvider) as BountyFactory;
  }
}
